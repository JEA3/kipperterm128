MEMORY {
    ZP: start = $02, size = $1A, type = rw ,define = yes ;
    IP65ZP: start = $5f, size = $10, type = rw,define = yes;
    RAM: start = $07FF, size = $c7ab, file = %O,define = yes;
}

SEGMENTS {
    STARTUP:  load = RAM, type = ro;
    LOWCODE:  load = RAM, type = ro,               optional = yes;
    INIT:     load = RAM, type = ro, define = yes, optional = yes;
    CODE:     load = RAM, type = ro;
    RODATA:   load = RAM, type = ro;
    DATA:     load = RAM, type = rw;
    SELF_MODIFIED_CODE: load = RAM, type = rw,define = yes, optional=yes;
	IP65_DEFAULTS: load = RAM, type = rw,define = yes, optional=yes;
    APP_SCRATCH: load = RAM, type = bss, optional=yes;
    TCP_VARS: load = RAM, type = bss, optional=yes;
    HTTP_VARS: load = RAM, type = bss, optional=yes;        
    BSS:      load = RAM, type = bss, define = yes;
    HEAP:     load = RAM, type = bss, optional = yes; # must sit just below stack
    ZPSAVE:   load = RAM, type = bss;

    ZEROPAGE: load = ZP,  type = zp;
    IP65ZP: load = IP65ZP, type = zp, optional=yes;

}
FEATURES {
    CONDES: segment = INIT,
            type = constructor,
            label = __CONSTRUCTOR_TABLE__,
            count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = destructor,
            label = __DESTRUCTOR_TABLE__,
            count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = interruptor,
            label = __INTERRUPTOR_TABLE__,
            count = __INTERRUPTOR_COUNT__;
}
SYMBOLS {
    __STACKSIZE__: value = $0800, weak = yes; # 2k stack
}
